}
config.list$cutadapt$version <- system2(command = config.list$cutadapt$path, args = "--version", wait = TRUE)
print(config.list)
}else{
config.list$cutadapt <- file.path(dirname(cutadaptPath),"cutadapt")
if(any(stringr::str_detect(list.files(config.list$cutadapt),"cutadapt")==FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
}
}
}
.InstallTrimGalore <- function(trimTarrBall , cutadaptPath ){
if(length(config.list) == 0){
if(missing(cutadaptPath)){
config.list$cutadapt$path <- file.path(dirname("~/.local/bin/cutadapt"),"cutadapt")
if(any(stringr::str_detect(list.files(config.list$cutadapt$path),"cutadapt")) ==FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
config.list$cutadapt$version <- system2(command = config.list$cutadapt$path, args = "--version", wait = TRUE)
print(config.list)
}else{
config.list$cutadapt <- file.path(dirname(cutadaptPath),"cutadapt")
if(any(stringr::str_detect(list.files(config.list$cutadapt),"cutadapt")==FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
}
}
}
.InstallTrimGalore <- function(trimTarrBall , cutadaptPath ){
if(length(config.list) == 0){
if(missing(cutadaptPath)){
# config.list$cutadapt$path <- file.path(dirname("~/.local/bin/cutadapt"),"cutadapt")
#
# if( any(stringr::str_detect(list.files(config.list$cutadapt$path),"cutadapt")) == FALSE){
#   stop("ERROR: cutadapt not found, pls verify instalation")
# }
# config.list$cutadapt$version <- system2(command = config.list$cutadapt$path, args = "--version", wait = TRUE)
# print(config.list)
}else{
config.list$cutadapt <- file.path(dirname(cutadaptPath),"cutadapt")
if(any(stringr::str_detect(list.files(config.list$cutadapt),"cutadapt")==FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
}
}
}
.InstallTrimGalore <- function(trimTarrBall , cutadaptPath ){
config.list <- .OpenConfigFile()
if(length(config.list) == 0){
if(missing(cutadaptPath)){
config.list$cutadapt$path <- file.path(dirname("~/.local/bin/cutadapt"),"cutadapt")
if( any(stringr::str_detect(list.files(config.list$cutadapt$path),"cutadapt")) == FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
config.list$cutadapt$version <- system2(command = config.list$cutadapt$path, args = "--version", wait = TRUE)
print(config.list)
}else{
config.list$cutadapt <- file.path(dirname(cutadaptPath),"cutadapt")
if(any(stringr::str_detect(list.files(config.list$cutadapt),"cutadapt"))==FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
}
}
}
.InstallTrimGalore()
source('~/.active-rstudio-document', echo=TRUE)
.InstallTrimGalore()
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R', echo=TRUE)
.InstallTrimGalore()
stringr::str_detect(list.files(config.list$cutadapt$path),"cutadapt")
list.files(config.list$cutadapt$path)
config.list$cutadapt$path
debugSource('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R', echo=TRUE)
.InstallTrimGalore()
.InstallTrimGalore()
config.list$cutadapt$path
system2(paste(config.list$cutadapt$path,"--version"))
system2(command = "/home/elmer/.local/bin/cutadapt", args = "--version", wait = TRUE)
system2(command = config.list$cutadapt$path, args =   "--version"))
system2(command = config.list$cutadapt$path, args =   "--version")
config.list$cutadapt$version
as.numeric(system2(command = config.list$cutadapt$path, args = "--version", wait = TRUE))
s <- as.numeric(system2(command = config.list$cutadapt$path, args = "--version", wait = TRUE))
a
debugSource('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R', echo=TRUE)
.InstallTrimGalore()
print(config.list)
ret <- as.numeric(system2(command = config.list$cutadapt$path, args = "--version", wait = TRUE))
ret
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R', echo=TRUE)
.InstallTrimGalore()
basename("https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
stringr::str_detect("https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz","https")
.InstallTrimGalore <- function(trimTarrBall , cutadaptPath, where ){
config.list <- .OpenConfigFile()
if(length(config.list) == 0){
if(missing(cutadaptPath)){
config.list$cutadapt$path <- file.path(dirname("~/.local/bin/cutadapt"),"cutadapt")
if( any(stringr::str_detect(list.files(dirname(config.list$cutadapt$path)),"cutadapt")) == FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
config.list$cutadapt$version <- as.numeric(system2(command = config.list$cutadapt$path, args = "--version", wait = TRUE, stdout = TRUE))
print(config.list)
}else{
config.list$cutadapt <- file.path(dirname(cutadaptPath),"cutadapt")
if(any(stringr::str_detect(list.files(config.list$cutadapt),"cutadapt"))==FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
}
}
##lISTO HASTA ACA CUTADAPT
if(missing(where)){
config.list$trimgalore$path <- dirname(config.list$cutadapt$path)
}else{
config.list$trimgalore$path <- where
}
if(stringr::str_detect(tirmTarBall, "https")){##URL, download
download.file(url = trimTarrBall, method = "wget",
destfile = file.path(config.list$trimgalore$path,"trim_galore.tar.gz"))
untar(file.path(config.list$trimgalore$path,"trim_galore.tar.gz"))
dlist <- list.dirs(config.list$trimgalore$path)
id<- which(stringr::str_detect(toupper(dlist),"TRIMGALORE"))
config.list$trimgalore$path <- dlist[[id]]
print(config.list$trimgalore$path <- dlist[[id]])
}
}
.InstallTrimGalore(trimTarrBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
.InstallTrimGalore <- function(trimTarrBall , cutadaptPath, where ){
config.list <- .OpenConfigFile()
if(length(config.list) == 0){
if(missing(cutadaptPath)){
config.list$cutadapt$path <- file.path(dirname("~/.local/bin/cutadapt"),"cutadapt")
if( any(stringr::str_detect(list.files(dirname(config.list$cutadapt$path)),"cutadapt")) == FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
config.list$cutadapt$version <- as.numeric(system2(command = config.list$cutadapt$path, args = "--version", wait = TRUE, stdout = TRUE))
print(config.list)
}else{
config.list$cutadapt <- file.path(dirname(cutadaptPath),"cutadapt")
if(any(stringr::str_detect(list.files(config.list$cutadapt),"cutadapt"))==FALSE){
stop("ERROR: cutadapt not found, pls verify instalation")
}
}
}
##lISTO HASTA ACA CUTADAPT
if(missing(where)){
config.list$trimgalore$path <- dirname(config.list$cutadapt$path)
}else{
config.list$trimgalore$path <- where
}
if(stringr::str_detect(trimTarBall, "https")){##URL, download
download.file(url = trimTarrBall, method = "wget",
destfile = file.path(config.list$trimgalore$path,"trim_galore.tar.gz"))
untar(file.path(config.list$trimgalore$path,"trim_galore.tar.gz"))
dlist <- list.dirs(config.list$trimgalore$path)
id<- which(stringr::str_detect(toupper(dlist),"TRIMGALORE"))
config.list$trimgalore$path <- dlist[[id]]
print(config.list$trimgalore$path <- dlist[[id]])
}
}
.InstallTrimGalore(trimTarrBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallTrimGalore(trimTarrBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
.InstallTrimGalore(trimTarBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
.InstallTrimGalore(trimTarBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
config.list$trimgalore$path
untar(file.path(config.list$trimgalore$path,"trim_galore.tar.gz"))
getwd()
file.exists(file.path(config.list$trimgalore$path,"trim_galore.tar.gz"))
untar(file.path(config.list$trimgalore$path,"trim_galore.tar.gz"))
untar(file.path(config.list$trimgalore$path,"trim_galore.tar.gz"), verbose = TRUE)
debugSource('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallTrimGalore(trimTarBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
dlist
id
dlist <- list.dirs(config.list$trimgalore$path, recursive = FALSE)
dlist
stringr::str_remove(toupper(basename(dlist[[2]])),"TRIMGALORE")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallTrimGalore(trimTarBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallTrimGalore(trimTarBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallTrimGalore(trimTarBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
system2("/home/elmer/.local/bin/TrimGalore-0.6.5/trim_galore")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallTrimGalore(trimTarBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallTrimGalore(trimTarBall = "https://github.com/FelixKrueger/TrimGalore/archive/0.6.5.tar.gz")
install.packages("combinat")
combinat::permn(c("A","B","C","D"))
do.call(rbind,combinat::permn(c("A","B","C","D","E","F","G")))[1:10,]
do.call(rbind,combinat::permn(c("A","B","C","D","A","F","B")))[1:10,]
dirname(".")
dirname("~/")
dirname("~/.local")
dirname("~/.local/")
dirname("~/.local/")
dir.exists("~/.local")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.OpenConfigFile()
dirname("~/.local/bin")
file.path(dirname("~/.local/bin"),"bin")
conf <- .OpenConfigFile()
conf$main$path <- "/home/elmer/.local/bin"
.SaveConfigFile(conf)
.OpenConfigFile()
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallFastQC("https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.9.zip")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallFastQC("https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.9.zip")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallFastQC("https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.9.zip")
system2(command = "/home/elmer/.local/bin/FastQC/fastqc")
system2(command = "chmod 755 /home/elmer/.local/bin/FastQC/fastqc")
system2(command = "/home/elmer/.local/bin/FastQC/fastqc")
system2(command = "/home/elmer/.local/bin/FastQC/fastqc", args = "--version")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallFastQC("https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.9.zip")
system2(command = "chmod", args = c("755", file.path(config.list$fastqc$path,"fastqc")))
config.list$fastqc$version <- system2(command = "fastqc", args = "--version", stdout = TRUE)
config.list$fastqc$version <- system2(command = file.path(config.list$fastqc$path,"fastqc"), args = "--version", stdout = TRUE)
config.list
debugSource('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallFastQC("https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.9.zip")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.InstallFastQC("https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.9.zip")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
.OpenConfigFile()
RunFastQC <- function(){
config.list <- .OpenConfigFile()
system2(command = config.list$fastqc$path, args = c("--help"))
}
RunFastQC()
RunFastQC <- function(){
config.list <- .OpenConfigFile()
system2(command = file.path(config.list$fastqc$path,"fastqc"), args = c("--help"))
}
RunFastQC()
length(c(1:4))*ifelse(2>0,1,0)
length(c(1:4))*ifelse(2>0,3,0)
length(c(1:4))*ifelse(2<0,3,0)
RunFastQC <- function(file, PE = TRUE, outdir, java, min_length, threads,
contaminants, adapters, limits, kmers ){
config.list <- .OpenConfigFile()
argument.vector <- c(outdir = "--outdir ", java = "--java ",
extract = "--extract", min_length = "--min_length",
threads = "--threads", contaminants = "--contaminants",
adapters = "--adapters ", limits = "--limits",
kmers = "--kmers")
if(missing(outdir)==FALSE){
dir.create(outdir)
if( dir.exists(outdir) == FALSE){
stop(paste("ERROR:", outdir, "could not be created" ))
}
}
if(!missing(java)){
argument.vector["java"] <- paste(argument.vector["java"],java)
}
if(!missing(min_length)){
argument.vector["min_length"] <- paste(argument.vector["min_length"],min_length)
}
if(!missing(threads)){
nc <- parallel::detectCores()
if(threads > length(files)*ifelse(PE,2,1)){
threads <- length(files)*ifelse(PE,2,1)
}
if(threads > nc){
threads <- nc
}
argument.vector["threads"] <- paste(argument.vector["threads"],threads)
}else{
argument.vector["thread"] <- paste(argument.vector["thread"],1)
}
if(PE){
file2 <- file
file2 <- stringr::str_remove_all(file2,"_1.fastq","_2.fastq")
}
print(file)
print(file2)
print(argument.vector)
# system2(command = file.path(config.list$fastqc$path,"fastqc"), args = c("--help"))
}
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 5)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 5)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 5)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 5)
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 11)
kmer <- 12
2<=kmer & kmer <=10
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 11, kmers = 11)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 11, kmers = 11)
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 11)
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/3522_1.fastq", threads = 11)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/3522_1.fastq", threads = 11)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/3522_1.fastq", threads = 11)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/3522_1.fastq", threads = 11)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/3522_1.fastq", threads = 11)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/3522_1.fastq", threads = 11)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/3522_1.fastq", threads = 11)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 2)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 2)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 2)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunFastQC(file = "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", threads = 2)
RunTrimGalore <- function(file, paired = TRUE, quality = 20, phred33 = "ON", phred64 = FALSE,
fastqc = FALSE, max_length, error_rate = 0.1, gzip=TRUE,
length = 20, maxn, trimn, outdir, report_file = TRUE,
clip_R1, clip_R2, three_prime_clip_R1, three_prime_clip_R2,
retain_unpaired, length_1 = 35, length_2 = 35,
trim1, cores =4 ){
#   --path_to_cutadapt
config.list <- .OpenConfigFile()
trim.arguments <- ifelse(paired,"--paired", NULL)
if(quality>0){
trim.arguments <- c(trim.arguments, quality = paste("--quality",quality))
}else{
stop("ERROR, quality > 0")
}
phred33 <- paste("--phred", match.arg(phred33, c("ON","OFF")))
trim.arguments <- c(trim.arguments, phred33 = phred33)
if(phred64){
trim.arguments <- c(trim.arguments, phred64 = "--phred64")
}
if(fastqc){
trim.arguments <- c(trim.arguments, fastqc = "--fastqc")
}
if(!missing(max_length)){
trim.arguments <- c(trim.arguments, max_length = paste("--max_length",max_length))
}
trim.arguments <- c(trim.arguments, error_rate = paste("--error_rate",error_rate))
if(gzip){
trim.arguments <- c(trim.arguments, gzip = "--gzip")
}else{
trim.arguments <- c(trim.arguments, dont_gzip = "--dont_gzip")
}
trim.arguments <- c(trim.arguments, length = paste("--length",length))
if(!missing(maxn)){
trim.arguments <- c(trim.arguments, maxn = paste("--max_n",maxn))
}
if(!missing(trimn)){
trim.arguments <- c(trim.arguments, trimn = paste("--trim-n",trimn))
}
if(missing(outdir)==FALSE){
dir.create(outdir)
if( dir.exists(outdir) == FALSE){
stop(paste("ERROR:", outdir, "could not be created" ))
}else{
trim.arguments <- c(trim.arguments, output_dir = paste("--output_dir",outdir))
}
}else{
trim.arguments <- c(trim.arguments, output_dir = paste("--output_dir",dirname(file[1])))
}
if(!report_file){
trim.arguments <- c(trim.arguments, "--no_report_file")
}
trimgalore <- file.path(config.list$trimgalore$path,"trim_galore")
cutadapt.path <- file.path(config.list$cutadapt$path,"cutadapt")
trim.arguments <- c(trim.arguments, paste("--path_to_cutadapt", cutadapt.path))
# arguments <- c("--paired",sbj$files, "--cores 2 " ,"--path_to_cutadap ~/.local/bin/cutadapt ", paste("-o ",sbj$subjectDir,sep=""))
print(c(comm,trim.arguments))
}
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore <- function(file = "AAA", paired = TRUE, quality = 20, phred33 = "ON", phred64 = FALSE, cores =4 )
)
RunTrimGalore(file = "AAA", paired = TRUE, quality = 20, phred33 = "ON", phred64 = FALSE, cores =4 )
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
system2(command = "/home/elmer/.local/bin/TrimGalore-0.6.5/trim_galore" , args = c("--paired", "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq", "/home/elmer/Elmer/FLENI/RNAseq/35252/35252_2.fastq")
)
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
source('~/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/test.NGS.R')
ret <- RunTrimGalore(file="/home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq")
ret
system2(command = ret[[1]], args = ret[[2]])
system2(command = "/home/elmer/.local/bin/TrimGalore-0.6.5/trim_galore" , args = "--paired --quality 20 --phred33 ON -e 0.1 --gzip --length 20 --output_dir /home/elmer/Elmer/FLENI/RNAseq/35252 --path_to_cutadapt /home/elmer/.local/bin/cutadapt --cores 4 /home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq /home/elmer/Elmer/FLENI/RNAseq/35252/35252_2.fastq")
system2(command = "/home/elmer/.local/bin/TrimGalore-0.6.5/trim_galore" , args = "--paired --quality 20 --phred33 ON -e 0.1 --gzip --length 20 --output_dir /home/elmer/Elmer/FLENI/RNAseq/35252 --path_to_cutadapt /home/elmer/.local/bin/cutadapt /home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq /home/elmer/Elmer/FLENI/RNAseq/35252/35252_2.fastq")
system2(command = "/home/elmer/.local/bin/TrimGalore-0.6.5/trim_galore" , args = "--paired /home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq  /home/elmer/Elmer/FLENI/RNAseq/35252/35252_2.fastq --quality 20 --phred33 ON -e 0.1 --gzip --length 20 --output_dir /home/elmer/Elmer/FLENI/RNAseq/35252 --path_to_cutadapt /home/elmer/.local/bin/cutadapt")
system2(command = "/home/elmer/.local/bin/TrimGalore-0.6.5/trim_galore" , args = "--paired /home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq  /home/elmer/Elmer/FLENI/RNAseq/35252/35252_2.fastq --quality 20 --phred33 ON -e 0.1 --gzip --length 20 --output_dir /home/elmer/Elmer/FLENI/RNAseq/35252 --path_to_cutadapt /home/elmer/.local/bin/cutadapt --cores 4")
system2(command = "/home/elmer/.local/bin/TrimGalore-0.6.5/trim_galore" , args = "--paired /home/elmer/Elmer/FLENI/RNAseq/35252/35252_1.fastq  /home/elmer/Elmer/FLENI/RNAseq/35252/35252_2.fastq --output_dir /home/elmer/Elmer/FLENI/RNAseq/35252 --path_to_cutadapt /home/elmer/.local/bin/cutadapt --cores 4")
library(Rsubread)
library(RAPInetMHCpan)
cf <- .OpenConfigFile()
cf
system2(command = file.path(cf$fastqc$path,"fastqc"), args = "--help")
plot(1/seq(0.1,2,length.out = 10))
plot(1/(1+exp(-seq(0.1,2,length.out = 10))))
plot(1/(1+exp(seq(0.1,2,length.out = 10))))
plot(1/(1+exp(5*seq(0.1,2,length.out = 10))))
##NGS
do.call(rbind,combinat::permn(c("A","B","C","D","A","F","B")))[1:10,]
s2c("GLFGDIYLA")
seqinr::s2c("GLFGDIYLA")
##NGS
do.call(rbind,combinat::permn(seqinr::s2c("GLFGDIYLA")))[1:10,]
myseq <- seqinr::s2c("GLFGDIYLA")
seqinr::as.SeqFastaAA(myseq, name = "myseq", Annot = "blablabla")
myseq
library(seqinr)
##NGS
apply(do.call(rbind,combinat::permn(seqinr::s2c("GLFGDIYLA")))[1:10,],1,function(x) paste(x,collapse = ""))
##NGS
seqs <- apply(do.call(rbind,combinat::permn(seqinr::s2c("GLFGDIYLA")))[1:10,],1,function(x) paste(x,collapse = ""))
write.fasta(seqs, "/home/elmer/pep.fasta")
write.fasta(seqs,file.out= "/home/elmer/pep.fasta")
write.fasta(seqs,names = paste(seq, 1:length(seqs),sep="-"),file.out= "/home/elmer/pep.fasta")
length(seqs)
write.fasta(seqs,names = paste("seq", 1:length(seqs),sep="-"),file.out= "/home/elmer/pep.fasta")
write.fasta(as.list(seqs),names = paste("seq", 1:length(seqs),sep="-"),file.out= "/home/elmer/pep.fasta")
res <- RunNetMHCPan(seqfile = "/home/elmer/pep.fasta", allele = "HLA-A02:01")
res
library(RAPInetMHCpan)
res <- RunNetMHCPan(seqfile = "/home/elmer/pep.fasta", allele = "HLA-A02:01")
res
res <- RunNetMHCPan(seqfile = "/home/elmer/pep.fasta", allele = "HLA-A02:01", pLength = 9)
res
##NGS
seqs <- apply(do.call(rbind,combinat::permn(seqinr::s2c("GLFGDIYLA")))[1:1000,],1,function(x) paste(x,collapse = ""))
write.fasta(as.list(seqs),names = paste("seq", 1:length(seqs),sep="-"),file.out= "/home/elmer/pep.fasta")
res <- RunNetMHCPan(seqfile = "/home/elmer/pep.fasta", allele = "HLA-A02:01")
res <- RunNetMHCPan(seqfile = "/home/elmer/pep.fasta", allele = "HLA-A02:01", pLength = 9)
res
rank <. as.numeric(as.character(res$PercRank))
rank <- as.numeric(as.character(res$PercRank))
hist(rank)
hist(rank,200)
boxplot(rank)
rank[1]
quantile(rank,0.05)
mean(rank[1]>rank[-1])
round(mean(rank[1]>rank[-1]),5)
sum((rank[1]>rank[-1]))
boxplot(rank[-1])
rank[1:10]
seqs <- c("GLFGDIYLA","GSFGDIYLA")
write.fasta(as.list(seqs),names = paste("seq", 1:length(seqs),sep="-"),file.out= "/home/elmer/pep.fasta")
res <- RunNetMHCPan(seqfile = "/home/elmer/pep.fasta", allele = "HLA-A02:01", pLength = 9)
rank <- as.numeric(as.character(res$PercRank))
rank
res
0.8338/0.40099
log(0.8338/0.40099)
log2(0.8338/0.40099)
permutation(s2c("GLFGDIYLA"),modele='base')
seqs <- BiocParallel::bplapply(1:1000, function(x, seq) seqinr::permutation(sequence = seq, modele = "base"), seq = seqinr::s2c("GLFGDIYLA"),
BiocParallel::multicoreWorkers(workers = 4))
seqs <- BiocParallel::bplapply(1:1000, function(x, seq) seqinr::permutation(sequence = seq, modele = "base"), seq = seqinr::s2c("GLFGDIYLA"),
BPPARAM = BiocParallel::multicoreWorkers(workers = 4))
seqs <- BiocParallel::bplapply(1:1000, function(x, seq) seqinr::permutation(sequence = seq, modele = "base"), seq = seqinr::s2c("GLFGDIYLA"),
BPPARAM = BiocParallel::MulticoreParam(workers = 4))
write.fasta(as.list(seqs),names = paste("seq", 1:length(seqs),sep="-"),file.out= "/home/elmer/pep.fasta")
c(a=1, list(b=2,c=3))
seqs[[1]]
seqs <- BiocParallel::bplapply(1:1000, function(x, seq) seqinr::permutation(sequence = seq, modele = "base"), seq = paste(seqinr::s2c("GLFGDIYLA"),collapse = ""),
BPPARAM = BiocParallel::MulticoreParam(workers = 4))
seqs <- c("GLFGDIYLA",seqs)
length(seqs)
class(seqs)
write.fasta(seqs,names = paste("seq", 1:length(seqs),sep="-"),file.out= "/home/elmer/pep.fasta")
res <- RunNetMHCPan(seqfile = "/home/elmer/pep.fasta", allele = "HLA-A02:01", pLength = 9)
dim(res)
rank <- as.numeric(as.character(res$PercRank))
rank[1]
summary(res[-1])
summary(rank[-1])
rank[1]
seqs <- BiocParallel::bplapply(1:1000, function(x, seq) paste(seqinr::permutation(sequence = seq, modele = "base"), collapse = ""), seq = seqinr::s2c("GLFGDIYLA"),
BPPARAM = BiocParallel::MulticoreParam(workers = 4))
seqs[[1]]
seqs <- c("GLFGDIYLA",seqs)
seqs[1]
seqs[1:2]
write.fasta(seqs,names = paste("seq", 1:length(seqs),sep="-"),file.out= "/home/elmer/pep.fasta")
res <- RunNetMHCPan(seqfile = "/home/elmer/pep.fasta", allele = "HLA-A02:01", pLength = 9)
rank <- as.numeric(as.character(res$PercRank))
rank[1]
summary(rank[-1])
