{
    "data" : [
        "\nR version 3.6.1 (2019-07-05) -- \"Action of the Toes\"\nCopyright (C) 2019 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR es un software libre y viene sin GARANTIA ALGUNA.\nUsted puede redistribuirlo bajo ciertas circunstancias.\nEscriba 'license()' o 'licence()' para detalles de distribucion.\n\nR es un proyecto colaborativo con muchos contribuyentes.\nEscriba 'contributors()' para obtener más información y\n'citation()' para saber cómo citar R o paquetes de R en publicaciones.\n\n",
        "Escriba 'demo()' para demostraciones, 'help()' para el sistema on-line de ayuda,\no 'help.start()' para abrir el sistema de ayuda HTML con su navegador.\nEscriba 'q()' para salir de R.\n\n",
        "> ",
        "library(BiocParallel)",
        "> ",
        "BiocParallel::bpnworkers()",
        "Error in bpworkers(x) : \n  el argumento \"x\" está ausente, sin valor por omisión\n",
        "> ",
        "match.arg(\"A\", c(\"B\",\"D\"))",
        "Error in match.arg(\"A\", c(\"B\", \"D\")) : 'arg' should be one of “B”, “D”\n",
        "> ",
        "a<- try(match.arg(\"A\", c(\"B\",\"D\")))",
        "Error in match.arg(\"A\", c(\"B\", \"D\")) : 'arg' should be one of “B”, “D”\n",
        "> ",
        "a<- try(match.arg(\"A\", c(\"A\",\"D\")))",
        "> ",
        "a",
        "[1] \"A\"\n",
        "> ",
        "a<- try(match.arg(\"A\", c(\"B\",\"D\")))",
        "Error in match.arg(\"A\", c(\"B\", \"D\")) : 'arg' should be one of “B”, “D”\n",
        "> ",
        "a",
        "[1] \"Error in match.arg(\\\"A\\\", c(\\\"B\\\", \\\"D\\\")) : 'arg' should be one of “B”, “D”\\n\"\nattr(,\"class\")\n[1] \"try-error\"\nattr(,\"condition\")\n<simpleError in match.arg(\"A\", c(\"B\", \"D\")): 'arg' should be one of “B”, “D”>\n\nRestarting R session...\n\n",
        "> ",
        "library(RAPInetMHCpan)",
        "> ",
        "mhci <- readRDS(file = \"/home/elmer/Elmer/Covid19/YP_009724390.1.fasta_MHC.RDS\")",
        "> ",
        "class(mhci)",
        "[1] \"RAPIMHC\"\n",
        "> ",
        "head(mhci)",
        "[1] \"  157  HLA-A*01:01  FRVYSSANNCTFEY  FANNCTFEY  0  1  5  0  0 FRVYSSANNCTFEY YP_009724390_1_ 0.3709640   903.3  0.4483 <= SB\"\n[2] \"  253  HLA-A*01:01  DSSSGWTAGAAAYY  DSSSAAAYY  0  4  5  0  0 DSSSGWTAGAAAYY YP_009724390_1_ 0.3948200   697.8  0.3778 <= SB\"\n[3] \"  440  HLA-A*01:01  NLDSKVGGNYNYLY  NLDSYNYLY  0  4  5  0  0 NLDSKVGGNYNYLY YP_009724390_1_ 0.5603210   116.4  0.1026 <= SB\"\n[4] \"  460  HLA-A*01:01  NLKPFERDISTEIY  NLDISTEIY  0  2  5  0  0 NLKPFERDISTEIY YP_009724390_1_ 0.3742890   871.4  0.4372 <= SB\"",
        "\n[5] \"  599  HLA-A*01:01  TPGTNTSNQVAVLY  TSNQVAVLY  0  1  5  0  0 TPGTNTSNQVAVLY YP_009724390_1_ 0.3624560   990.4  0.4767 <= SB\"\n[6] \"  743  HLA-A*01:01  CGDSTECSNLLLQY  STECSNLLY  3  8  2  0  0  STECSNLLLQY YP_009724390_1_ 0.4172320   547.5  0.3247 <= SB\"  \n",
        "> ",
        "mhci <- FormatOut(mhci)",
        "Error in str_detect(x, \"<= SB\") : \n  no se pudo encontrar la función \"str_detect\"\n",
        "> ",
        "library(stringr)",
        "> ",
        "mhci <- FormatOut(mhci)",
        "> ",
        "table(mhci$Type)",
        "\n    SB     WB \n 90629 293806 \n",
        "> ",
        "length(unique(subset(mhci, Type == \"SB\")$Peptide))",
        "[1] 1320\n",
        "> ",
        "length(unique(subset(mhci, Type == \"SB\")$InterCore))",
        "[1] 1282\n",
        "> ",
        "length(VerifySeq(seqFile = \"/home/elmer/Elmer/Covid19/SeqsProteinas/SARS_spike.fasta\", eDB = subset(mhci, Type == \"SB\")))",
        "[1] 1\n",
        "> ",
        "ret <- VerifySeq(seqFile = \"/home/elmer/Elmer/Covid19/SeqsProteinas/SARS_spike.fasta\", eDB = subset(mhci, Type == \"SB\"))",
        "> ",
        "length(ret$Peptide)",
        "[1] 293\n",
        "> ",
        "names(ret)",
        "[1] \"Peptide\"\n",
        "> ",
        "class(mhci)",
        "[1] \"data.frame\"\n",
        "> ",
        "class(mhci) <- c(\"RAPIMHC\", \"data.frame\")",
        "> ",
        "ret <- VerifySeq(seqFile = \"/home/elmer/Elmer/Covid19/SeqsProteinas/SARS_spike.fasta\", eDB = subset(mhci, Type == \"SB\"))",
        "> ",
        "names(ret)",
        "[1] \"Peptide\"   \"InterCore\"\n",
        "> ",
        "length(ret$InterCore)",
        "[1] 287\n",
        "> ",
        "PlotPeptideLengthDistribution(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "Error in ggplot(df, aes(Length)) : \n  no se pudo encontrar la función \"ggplot\"\n",
        "Además: ",
        "Warning message:\n",
        "In if (class(resDF) == \"data.frame\") { :",
        "\n ",
        " la condición tiene longitud > 1 y sólo el primer elemento será usado\n",
        "> ",
        "class(subset(mhci, Type == \"SB\"))",
        "[1] \"RAPIMHC\"    \"data.frame\"\n\nRestarting R session...\n\n",
        "> ",
        "library(RAPInetMHCpan)",
        "> ",
        "PlotPeptideLengthDistribution(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "Error in PlotPeptideLengthDistribution(resDF = subset(mhci, Type == \"SB\"),  : \n  Error: is not an appropriate data frame imput\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(RAPInetMHCpan)",
        "> ",
        "PlotPeptideLengthDistribution(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "Called from: eval(expr, p)\n",
        "Browse[1]> ",
        "n",
        "debug en /home/elmer/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/R/PlotRAPIFunctions.R#20: if (\"RAPIMHC\" %in% class(resDF)) {\n    if (all(colnames(resDF) %in% c(\"Peptide\", \"InterCore\")) == \n        FALSE) {\n        stop(\"Error: is not an appropriate data frame imput\")\n    }\n}\n",
        "Browse[2]> ",
        "class(resDF)",
        "[1] \"RAPIMHC\"    \"data.frame\"\n",
        "Browse[2]> ",
        "colnames(resDF)",
        " [1] \"Pos\"       \"Allele\"    \"Peptide\"   \"Core\"      \"Offset\"    \"Dpos\"      \"Dlenght\"   \"Ipos\"      \"Ilength\"   \"InterCore\"\n[11] \"SeqName\"   \"RawScore\"  \"Affy\"      \"PercRank\"  \"Type\"     \n",
        "Browse[2]> ",
        "n",
        "debug en /home/elmer/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/R/PlotRAPIFunctions.R#21: if (all(colnames(resDF) %in% c(\"Peptide\", \"InterCore\")) == FALSE) {\n    stop(\"Error: is not an appropriate data frame imput\")\n}\n",
        "Browse[2]> ",
        "n",
        "debug en /home/elmer/Dropbox/IDEAS/Covid-19/RAPInetMHCpan/R/PlotRAPIFunctions.R#22: stop(\"Error: is not an appropriate data frame imput\")\n",
        "Browse[2]> ",
        "Q",
        "\nRestarting R session...\n\n",
        "> ",
        "library(RAPInetMHCpan)",
        "> ",
        "PlotPeptideLengthDistribution(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "Error in ggplot(df, aes(Length)) : \n  no se pudo encontrar la función \"ggplot\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(RAPInetMHCpan)",
        "> ",
        "PlotPeptideLengthDistribution(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "Error in aes(Length) : no se pudo encontrar la función \"aes\"\n",
        "> ",
        "library(ggplot2)",
        "> ",
        "PlotPeptideLengthDistribution(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "\nRestarting R session...\n\n",
        "> ",
        "library(RAPInetMHCpan)",
        "> ",
        "PlotPeptideLengthDistribution(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "> ",
        "PlotPeptideBindingDistribution(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "Error in PlotPeptideBindingDistribution(resDF = subset(mhci, Type == \"SB\"),  : \n  no se pudo encontrar la función \"PlotPeptideBindingDistribution\"\n",
        "> ",
        "PlotBindingPeptideDistribution(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "> ",
        "RepresentedRegions(resDF = subset(mhci, Type == \"SB\"), main = \"SB\")",
        "> ",
        "getwd()",
        "[1] \"/home/elmer/Dropbox/IDEAS/Covid-19/RAPInetMHCpan\"\n",
        "> ",
        "pdf(file = \"/home/elmer/Dropbox/IDEAS/Covid-19/RepresentedRegions.pdf\", width = 4, height = 4 )",
        "> ",
        "RepresentedRegions(resDF = subset(mhci, Type == \"SB\"), main = \"Strong Binders\")",
        "> ",
        "dev.off()",
        "RStudioGD \n        2 \n",
        "> ",
        "pdf(file = \"/home/elmer/Dropbox/IDEAS/Covid-19/RepresentedRegions.pdf\", paper= \"a4\", width = 4, height = 4 )",
        "> ",
        "RepresentedRegions(resDF = subset(mhci, Type == \"SB\"), main = \"Strong Binders\", nbk = 50)",
        "> ",
        "dev.off()",
        "RStudioGD \n        2 \n",
        "> ",
        "pdf(file = \"/home/elmer/Dropbox/IDEAS/Covid-19/RepresentedRegions.pdf\", paper= \"a4\")",
        "> ",
        "RepresentedRegions(resDF = subset(mhci, Type == \"SB\"), main = \"Strong Binders\", nbk = 50)",
        "> ",
        "dev.off()",
        "RStudioGD \n        2 \n\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ]
}